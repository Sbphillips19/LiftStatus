{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","mountain","setMountain","mountainData","setMountainData","setMountainError","fetchResort","a","requestOptions","method","redirect","response","fetch","then","text","result","JSON","parse","catch","error","console","log","alert","className","style","display","flexDirection","justifyContent","padding","maxWidth","margin","borderStyle","borderWidth","name","id","required","autoComplete","type","onChange","event","target","value","htmlFor","onClick","width","height","backgroundColor","color","marginTop","marginLeft","alignItems","Object","keys","lifts","status","map","key","weather","date","conditions","temperature","max","src","webcams","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,0KCqG5BC,MA1Ff,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAG2BF,mBAAS,IAHpC,mBAGNG,EAHM,KAGQC,EAHR,OAI6BJ,mBAAS,IAJtC,mBAISK,GAJT,WAMPC,EAAW,uCAAG,4BAAAC,EAAA,sDAcdC,EAAiB,CACnBC,OAAQ,MACRC,SAAU,SACVC,SAAU,mCAGZC,MAAM,4EAAD,OAA6EX,GAAYO,GAC3FK,MAAK,SAAAF,GAAQ,OAAIA,EAASG,UAC1BD,MAAK,SAAAE,GAAM,OAAIX,EAAgBY,KAAKC,MAAMF,OAC1CG,OAAM,SAAAC,GACLC,QAAQC,IAAIhB,EAAiBc,IAC7Bd,EAAiBc,GACjBG,MAAM,qCA1BQ,2CAAH,qDAsCjB,OAFAF,QAAQC,IAAI,IAAKlB,GAAgBA,GAG/B,yBAAKoB,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAEF,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,eAAgB,SAAUC,QAAS,OAAQC,SAAU,QAASC,OAAQ,OAAQC,YAAa,QAASC,YAAa,QACvK,2BAAOT,UAAU,WAAWU,KAAK,OAAOC,GAAG,MAAMC,UAAQ,EAACC,aAAa,MAAMC,KAAK,OAAOC,SAZ1E,SAACC,GACpBrC,EAAYqC,EAAMC,OAAOC,QAW4FA,MAAOxC,IACxH,2BAAOyC,QAAQ,OAAM,uDACrB,4BAAQnB,UAAU,SAASoB,QAAS,WAAqB,KAAb1C,EAAkBK,IAAiBgB,MAAM,6BAA8BE,MAAO,CAAEoB,MAAO,QAASC,OAAQ,OAAQC,gBAAiB,UAAWC,MAAO,QAASC,UAAW,SAAnN,qBAEF,6BACA,6BACA,6BACC7C,GAAgB,2CAAiBA,EAAa+B,IAC9C/B,GACC,yBAAKqB,MAAO,CAAEO,YAAa,QAASC,YAAa,MAAOiB,WAAY,OAAQL,MAAO,UACjF,wBAAIpB,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUkB,MAAO,QAASM,WAAY,eACjF,4CACCC,OAAOC,KAAKjD,EAAakD,MAAMC,QAAQC,KAAI,SAAAC,GAAG,OAC7C,wBAAIA,IAAKA,GAAMA,EAAf,KAAsBrD,EAAakD,MAAMC,OAAOE,SAMvDrD,GACC,yBAAKqB,MAAO,CAAEO,YAAa,QAASC,YAAa,MAAOiB,WAAY,OAAQL,MAAO,UACjF,wBAAIpB,MAAO,CAAEyB,WAAY,OAAQD,UAAW,SAA5C,WACA,sCAAY7C,EAAasD,QAAQC,MACjC,4CAAkBvD,EAAasD,QAAQE,YACvC,2CAAiBxD,EAAasD,QAAQ3C,MACtC,6BACA,6BACA,0CAAgBX,EAAasD,QAAQG,YAAYC,MAGpD1D,GACC,yBAAKqB,MAAO,CAAEO,YAAa,QAASC,YAAa,MAAOiB,WAAY,OAAQL,MAAO,UACjF,wBAAIpB,MAAO,CAAEyB,WAAY,OAAQD,UAAW,SAA5C,UACA,yBAAKJ,MAAM,MAAMC,OAAO,MAAMiB,IAAK3D,EAAa4D,QAAQ,GAAGC,WClFjDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd7D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6D,c","file":"static/js/main.8b863a29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'whatwg-fetch';\nimport { findByLabelText, render } from '@testing-library/react';\n\n// const esc = encodeURIComponent;\n// export const queryFunc = (params) => Object.keys(params)\n//   .map(k => esc(k) + '=' + esc(params[k]))\n//   .join('&');\n\nfunction App() {\n\n  const [mountain, setMountain] = useState(\"\");\n  const [mountainData, setMountainData] = useState(\"\");\n  const [mountainError, setMountainError] = useState(\"\");\n\n  const fetchResort = async () => {\n\n    // const url = `https://evening-inlet-99281.herokuapp.com/https://liftie.info/api/resort/${mountain}`;\n\n    // const response = await fetch(url);\n    // if (!response.ok) {\n    //   console.log('Could not fetch user', response);\n    //   setMountainData(\"\");\n    //   return setMountainError(response);\n    // }\n    // debugger;\n    // setMountainData(response.json());\n    // setMountainError(\"\");\n\n    var requestOptions = {\n      method: 'GET',\n      redirect: 'follow',\n      response: 'application/json; charset=utf-8'\n    };\n\n    fetch(`https://evening-inlet-99281.herokuapp.com/https://liftie.info/api/resort/${mountain}`, requestOptions)\n      .then(response => response.text())\n      .then(result => setMountainData(JSON.parse(result)))\n      .catch(error => {\n        console.log(setMountainError(error))\n        setMountainError(error)\n        alert(\"please select a valid mountain\")\n      }\n      );\n  };\n\n\n  const handleChange = (event) => {\n    setMountain(event.target.value);\n  }\n\n  console.log(\"5\", mountainData && mountainData)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Mountain Status</h1>\n      </header>\n      <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', padding: '50px', maxWidth: '500px', margin: '50px', borderStyle: 'solid', borderWidth: '5px' }}>\n        <input className=\"question\" name=\"name\" id=\"nme\" required autoComplete=\"off\" type=\"text\" onChange={handleChange} value={mountain} />\n        <label htmlFor=\"nme\"><span>Enter mountain name?</span></label>\n        <button className=\"button\" onClick={() => { mountain !== \"\" ? fetchResort() :  alert(\"please type in a moutain\")}} style={{ width: '200px', height: '50px', backgroundColor: '#61dafb', color: 'white', marginTop: '30px' }}>Get Current Info</button>\n      </div>\n      <br />\n      <br />\n      <br />\n      {mountainData && <h1>Moutain ID: {mountainData.id}</h1>}\n      {mountainData &&\n        <div style={{ borderStyle: 'solid', borderWidth: '5px', marginLeft: '50px', width: '350px' }}>\n          <ul style={{ display: 'flex', flexDirection: 'column', width: '350px', alignItems: 'flex-start' }}>\n            <h2>Lift Status:</h2>\n            {Object.keys(mountainData.lifts.status).map(key =>\n              <li key={key}>{key}: {mountainData.lifts.status[key]}</li>\n            )\n            }\n          </ul>\n        </div>\n      }\n      {mountainData &&\n        <div style={{ borderStyle: 'solid', borderWidth: '5px', marginLeft: '50px', width: '350px' }}>\n          <h2 style={{ marginLeft: '50px', marginTop: '20px' }}>Weather</h2>\n          <div>Date: {mountainData.weather.date}</div>\n          <div>Conditions: {mountainData.weather.conditions}</div>\n          <div>More Info: {mountainData.weather.text}</div>\n          <br />\n          <br />\n          <div>Max Temp: {mountainData.weather.temperature.max}</div>\n        </div>\n      }\n      {mountainData &&\n        <div style={{ borderStyle: 'solid', borderWidth: '5px', marginLeft: '50px', width: '400px' }}>\n          <h2 style={{ marginLeft: '50px', marginTop: '20px' }}>Images</h2>\n          <img width=\"300\" height=\"300\" src={mountainData.webcams[0].image} />\n        </div>\n      }\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}